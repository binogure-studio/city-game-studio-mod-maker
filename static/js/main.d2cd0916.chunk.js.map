{"version":3,"sources":["index.js"],"names":["defaultFormData","App","props","handleSubmit","bind","loadFiles","formData","zip","JSZip","cloned_data","JSON","parse","stringify","formatData","_data","_ui_schema","Array","isArray","forEach","item","items","Object","keys","key","array","reduce","acc","label","translation","accept","filename","split","replace","file","dataURI","byteString","atob","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","Blob","dataURItoBlob","ui_schema","generateAsync","type","then","base64","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","getElementById","fileReader","FileReader","onload","rawData","console","log","target","result","setState","readAsText","files","id","schema","uiSchema","onSubmit","this","className","value","onClick","openFileDialog","onChange","Component","ReactDOM","render"],"mappings":"gq8GAUIA,EAAkB,G,IAmBDC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAJA,E,4DAOO,IAAZE,EAAW,EAAXA,SACRC,EAAM,IAAIC,IACVC,EAAcC,KAAKC,MAAMD,KAAKE,UAAUN,KAEzB,SAAbO,EAAcC,EAAOC,GAErBC,MAAMC,QAAQH,GAChBA,EAAMI,SAAQ,SAACC,GAAD,OAAUN,EAAWM,EAAMJ,EAAWK,UAEpDC,OAAOC,KAAKR,GAAOI,SAAQ,SAACK,GAC1B,GAAkB,MAAdR,GAAyC,MAAnBA,EAAWQ,SAE9B,GAA6B,MAAzBR,EAAWQ,GAAKH,OAAiBL,EAAWQ,GAAKH,MAAMI,MAChEV,EAAMS,GAAOT,EAAMS,GAAKE,QAAO,SAACC,EAAKP,GAGnC,OAFAO,EAAIP,EAAKQ,OAASR,EAAKS,YAEhBF,IACN,SACE,GAAqC,MAAjCX,EAAWQ,GAAK,eAAiE,MAAxCR,EAAWQ,GAAK,cAAcM,OAAgB,CAEhG,IACIC,EADYhB,EAAMS,GAAKQ,MAAM,KACR,GAAGC,QAAQ,QAAS,IAE7CzB,EAAI0B,KAAKH,EAhDrB,SAAuBI,GASrB,IANA,IAAIC,EAAaC,KAAKF,EAAQH,MAAM,KAAK,IAGrCM,EAAK,IAAIC,YAAYH,EAAWI,QAChCC,EAAK,IAAIC,WAAWJ,GAEfK,EAAI,EAAGA,EAAIP,EAAWI,OAAQG,IACrCF,EAAGE,GAAKP,EAAWQ,WAAWD,GAIhC,OAAO,IAAIE,KAAK,CAACP,IAkCYQ,CAAc/B,EAAMS,KACvCT,EAAMS,GAAOO,OAEbjB,EAAWC,EAAMS,GAAMR,EAAWQ,OAO1CV,CAAWJ,EAAaqC,GAExBvC,EAAI0B,KAAK,WAAYvB,KAAKE,UAAUH,EAAa,KAAM,IACvDF,EAAIwC,cAAc,CAACC,KAAM,WAAYC,MAAK,SAACC,GACzC,IAAIC,EAAqBC,SAASC,cAAc,KAEhDF,EAAmBG,aAAa,OAAQ,+BAAiCJ,GACzEC,EAAmBG,aAAa,WAAY,WAC5CF,SAASG,KAAKC,YAAYL,GAC1BA,EAAmBM,QACnBN,EAAmBO,c,uCAKrBN,SAASO,eAAe,cAAcF,U,kCAG3B,IAAD,OACNG,EAAa,IAAIC,WAEfhD,EAAa,SAAbA,EAAcC,EAAOC,GACrBC,MAAMC,QAAQH,GAChBA,EAAMI,SAAQ,SAACC,GAAD,OAAUN,EAAWM,EAAMJ,EAAWK,UAEpDC,OAAOC,KAAKR,GAAOI,SAAQ,SAACK,GACR,MAAdR,GAAyC,MAAnBA,EAAWQ,KAED,MAAzBR,EAAWQ,GAAKH,OAAiBL,EAAWQ,GAAKH,MAAMI,MAChEV,EAAMS,GAAOT,EAAMS,GAAKE,QAAO,SAACC,EAAKP,GAGnC,OAFAO,EAAIP,EAAKQ,OAASR,EAAKS,YAEhBF,IACN,IACuC,MAAjCX,EAAWQ,GAAK,eAAiE,MAAxCR,EAAWQ,GAAK,cAAcM,cAEzEf,EAAMS,GAEbV,EAAWC,EAAMS,GAAMR,EAAWQ,SAM1CqC,EAAWE,OAAS,SAACC,GACnBC,QAAQC,IAAIF,EAAQG,OAAOC,QAC3BnE,EAAkBU,KAAKC,MAAMoD,EAAQG,OAAOC,QAG5CtD,EAAWb,EAAiB8C,GAE5B,EAAKsB,SAASpE,IAGhB4D,EAAWS,WAAWjB,SAASO,eAAe,cAAcW,MAAM,M,+BAIlE,OACE,eAAC,IAAD,CAAMC,GAAG,iBACPC,OAAQA,EACRC,SAAU3B,EACV4B,SAAUC,KAAKxE,aACfG,SAAUN,EAJZ,UAME,wBAAQ4E,UAAU,eAAe5B,KAAK,SAAS6B,MAAM,WAArD,sBANF,mBAOE,wBAAQD,UAAU,eAAe5B,KAAK,SAAS6B,MAAM,OAAOC,QAASH,KAAKI,eAA1E,4BACA,uBAAOH,UAAU,WAAWL,GAAG,aAAavB,KAAK,OAAOnB,OAAO,mBAAmBmD,SAAUL,KAAKtE,mB,GA5GxE4E,aAkHjCC,IAASC,OAAO,cAAClF,EAAD,IAASmD,SAASO,eAAe,U","file":"static/js/main.d2cd0916.chunk.js","sourcesContent":["\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport JSZip from 'jszip';\nimport Form from '@rjsf/core';\n\nimport schema from './schemas.json';\nimport ui_schema from './ui-schemas.json';\n\nvar defaultFormData = {}\n\nfunction dataURItoBlob(dataURI) {\n  // convert base64 to raw binary data held in a string\n  // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\n  var byteString = atob(dataURI.split(',')[1]);\n\n  // write the bytes of the string to an ArrayBuffer\n  var ab = new ArrayBuffer(byteString.length);\n  var ia = new Uint8Array(ab);\n\n  for (var i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i)\n  }\n\n  // write the ArrayBuffer to a blob, and you're done\n  return new Blob([ab])\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.loadFiles = this.loadFiles.bind(this)\n  }\n\n  handleSubmit({formData}) {\n    let zip = new JSZip()\n    let cloned_data = JSON.parse(JSON.stringify(formData));\n\n    const formatData = (_data, _ui_schema) => {\n\n      if (Array.isArray(_data)) {\n        _data.forEach((item) => formatData(item, _ui_schema.items))\n      } else {\n        Object.keys(_data).forEach((key) => {\n          if (_ui_schema == null || _ui_schema[key] == null) {\n            // NO-OP\n          } else if (_ui_schema[key].items != null && _ui_schema[key].items.array) {\n            _data[key] = _data[key].reduce((acc, item) => {\n              acc[item.label] = item.translation\n\n              return acc\n            }, {})\n          } else if (_ui_schema[key]['ui:options'] != null && _ui_schema[key]['ui:options'].accept != null) {\n            // It is a file\n            let file_data = _data[key].split(';')\n            let filename = file_data[1].replace('name=', '')\n\n            zip.file(filename, dataURItoBlob(_data[key]))\n            _data[key] = filename\n          } else {\n            formatData(_data[key], _ui_schema[key])\n          }\n        })\n      }\n    }\n\n    // Reformat the data\n    formatData(cloned_data, ui_schema)\n\n    zip.file('mod.json', JSON.stringify(cloned_data, null, 2))\n    zip.generateAsync({type :\"base64\"} ).then((base64) => {\n      let downloadAnchorNode = document.createElement(\"a\")\n\n      downloadAnchorNode.setAttribute(\"href\", \"data:application/zip;base64,\" + base64)\n      downloadAnchorNode.setAttribute(\"download\", \"mod.zip\")\n      document.body.appendChild(downloadAnchorNode)\n      downloadAnchorNode.click()\n      downloadAnchorNode.remove()\n    })\n  }\n\n  openFileDialog() {\n    document.getElementById('file-input').click()\n  }\n\n  loadFiles() {\n    let fileReader = new FileReader()\n\n    const formatData = (_data, _ui_schema) => {\n      if (Array.isArray(_data)) {\n        _data.forEach((item) => formatData(item, _ui_schema.items))\n      } else {\n        Object.keys(_data).forEach((key) => {\n          if (_ui_schema == null || _ui_schema[key] == null) {\n            // NO-OP\n          } else if (_ui_schema[key].items != null && _ui_schema[key].items.array) {\n            _data[key] = _data[key].reduce((acc, item) => {\n              acc[item.label] = item.translation\n\n              return acc\n            }, {})\n          } else if (_ui_schema[key]['ui:options'] != null && _ui_schema[key]['ui:options'].accept != null) {\n\n            delete _data[key]\n          } else {\n            formatData(_data[key], _ui_schema[key])\n          }\n        })\n      }\n    }\n\n    fileReader.onload = (rawData) => {\n      console.log(rawData.target.result)\n      defaultFormData = JSON.parse(rawData.target.result)\n\n      // Reformat the data\n      formatData(defaultFormData, ui_schema)\n\n      this.setState(defaultFormData)\n    }\n\n    fileReader.readAsText(document.getElementById('file-input').files[0])\n  }\n\n  render() {\n    return (\n      <Form id=\"form-to-update\"\n        schema={schema}\n        uiSchema={ui_schema}\n        onSubmit={this.handleSubmit}\n        formData={defaultFormData}\n       >\n        <button className=\"btn btn-info\" type=\"submit\" value=\"Download\">Download</button>&nbsp;&nbsp;&nbsp;&nbsp;\n        <button className=\"btn btn-info\" type=\"button\" value=\"Load\" onClick={this.openFileDialog}>Load JSON file</button>\n        <input className=\"btn-file\" id=\"file-input\" type=\"file\" accept=\"application/json\" onChange={this.loadFiles} />\n      </Form>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n"],"sourceRoot":""}